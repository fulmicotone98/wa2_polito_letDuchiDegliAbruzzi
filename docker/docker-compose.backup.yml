# Start postgres databases from a backup
version: '3.1'
services:

  initializator:
    image: alpine
    container_name: initializator
    volumes:
    - ./volumes:/backup
    - postgres_keycloak:/keycloak
    - postgres_server:/server
    command: >
      sh -c " cd /server && tar xvf /backup/postgres_server_backup.tar --strip=4 &&
      		  cd /keycloak && tar xvf /backup/postgres_keycloak_backup.tar --strip=4 "
    
  postgres_serverDB:
    image: postgres
    container_name: postgers_serverDB
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    depends_on:
      initializator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
    - postgres_server:/var/lib/postgresql/data
    
  postgres_keycloakDB:
    image: postgres
    container_name: postgres_keycloakDB
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: keycloak
    depends_on:
      initializator:
        condition: service_completed_successfully
    volumes:
    - postgres_keycloak:/var/lib/postgresql/data
  
  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres_keycloakDB/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
    depends_on:
    - postgres_keycloakDB
    command:
      - start-dev
      
  grafana:
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    
  prometheus:
    image: prom/prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
       
  tempo:
    image: grafana/tempo
    container_name: tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin

  loki:
    image: grafana/loki
    container_name: loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      
volumes:
  postgres_keycloak: 
  postgres_server:
    
    

